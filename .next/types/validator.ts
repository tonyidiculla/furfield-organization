// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}


// Validate ../../src/app/auth/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth">> = Specific
  const handler = {} as typeof import("../../src/app/auth/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/sign-in/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/sign-in">> = Specific
  const handler = {} as typeof import("../../src/app/auth/sign-in/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/sign-up/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/sign-up">> = Specific
  const handler = {} as typeof import("../../src/app/auth/sign-up/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/entities/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/entities">> = Specific
  const handler = {} as typeof import("../../src/app/entities/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/organization/[id]/edit/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/organization/[id]/edit">> = Specific
  const handler = {} as typeof import("../../src/app/organization/[id]/edit/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/organization/[id]/entities/[entityId]/edit/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/organization/[id]/entities/[entityId]/edit">> = Specific
  const handler = {} as typeof import("../../src/app/organization/[id]/entities/[entityId]/edit/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/organization/[id]/entities/[entityId]/hms/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/organization/[id]/entities/[entityId]/hms">> = Specific
  const handler = {} as typeof import("../../src/app/organization/[id]/entities/[entityId]/hms/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/organization/[id]/entities/create/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/organization/[id]/entities/create">> = Specific
  const handler = {} as typeof import("../../src/app/organization/[id]/entities/create/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/organization/[id]/entities/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/organization/[id]/entities">> = Specific
  const handler = {} as typeof import("../../src/app/organization/[id]/entities/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/organization/create/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/organization/create">> = Specific
  const handler = {} as typeof import("../../src/app/organization/create/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/organization/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/organization">> = Specific
  const handler = {} as typeof import("../../src/app/organization/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/platform-id-test/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/platform-id-test">> = Specific
  const handler = {} as typeof import("../../src/app/platform-id-test/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/test-privileges/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/test-privileges">> = Specific
  const handler = {} as typeof import("../../src/app/test-privileges/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}







// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
